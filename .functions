#!/usr/local/bin/bash 
[[ "$DEBUG_STARTUP:" == "1:" ]] && echo "RUNNING $HOME/.functions"


set_perl() {
  if [ "$1:" == ":" ]; then 
    echo "USAGE: set_perl [SYSTEM|HOMEBREW]"
  elif [ $1 == "SYSTEM" ]; then
    unset PERLLIB
    unset PERL5LIB
    export PERL=/usr/bin/perl
  elif [ "$1" == "HOMEBREW" ]; then
    export PERLLIB=/usr/local/Cellar/perl/5.30.1/lib/perl5/site_perl/5.30.1/darwin-thread-multi-2level:/usr/local/Cellar/perl/5.30.1/lib/perl5/site_perl/5.30.1:/usr/local/Cellar/perl/5.30.1/lib/perl5/5.30.1/darwin-thread-multi-2level:/usr/local/Cellar/perl/5.30.1/lib/perl5/5.30.1
    export PERL5LIB=$PERLLIB
    export PERL=/usr/local/bin/perl
  else
    echo "USAGE: set_perl [SYSTEM|HOMEBREW]"
  fi
}

set_python() {
  if [ "$1:" == ":" ]; then
    echo "USAGE: set_python [2|3]"
  elif [ "$1" == "2" ]; then
    export PYTHONPATH=/usr/local/lib/python2.7/site-packages:~/Library/Python/2.7/lib/python/site-packages
    alias ipython="$(which ipython2)"
    alias python="$(which python2.7)"
    alias pip="$(which pip2.7)"
  elif [ "$1" == "3" ]; then
    unset PYTHONPATH
    alias ipython="$(which ipython3)"
    alias python="$(which python3)"
    alias pip="$(which pip3)"
  else
    echo "USAGE: set_python [2|3]"
  fi
}

adialog() {
  message="$*"
  {
    osascript -e "tell app \"System Events\" to display dialog \"$message\"" >/dev/null 2>&1 && echo 0
  } || {
    echo 1
  }
}

function logtimesplit() { 
  t1="$(tail -n2 $HOME/mytasks.txt | head -n1 | perl -p -e 's/^.*\047 at //g')"
  t2="$(tail -n1 $HOME/mytasks.txt | perl -p -e 's/^.*\047 at //g')"
  ddiff "$t1" "$t2" -f '%H %M'
}

function logtask() { 
  if [[ $# -eq 0 ]]; then
    tail -n20 $HOME/mytasks.txt
    echo
    echo "USAGE: logtask TASKNAME [start|stop]"
    echo "   Logs start/stops to file $HOME/mytasks.txt"
  else
    taskname="$1" 
    startstop="${2:-start}" 
    echo "${startstop[*]^} task '$taskname' at $(date +'%Y-%m-%d %H:%M:%S')" | tee -a $HOME/mytasks.txt 
    if [ $startstop == "stop" ]; then
      logtimesplit
      logtimesplit | sed -e 's/ /:/g' >> $HOME/mytimes.txt
      sum_times.py $HOME/mytimes.txt
    fi
  fi
}

logstart() {
  if [[ $# -eq 0 ]]; then 
    echo "USAGE: logstart TASKNAME"
  else
    logtask "$*" start
  fi
}

logstop() {
  if [[ $# -eq 0 ]]; then 
    echo "USAGE: logstop TASKNAME"
  else
    logtask "$*" stop
  fi
}

function settruecolor() {
  red="$1"
  green="$2"
  blue="$3"
  printf "\x1b[38;2;%d;%d;%dm" $red $green $blue
}

function resettruecolor() {
  printf "\x1b[0m"
}

function gitignore() {
  arg=("$@")
  for ((i=0; i<$#; i++)); do
    echo "${arg[i]}" >> .gitignore
  done
}

save_last_command() {
  lastcommand="$(history | tail -n2 | head -n1  | perl -p -e 's/^\W*\d+\W+//g')"
  function_file=${1:-$HOME/saved_functions.txt}
  if [[ ! -f "$function_file" ]]; then
    echo "Function file $function_file does not exist!"
  else
    echo "$lastcommand" >> "$function_file"
    echo "Wrote '$lastcommand' to '$function_file'"
  fi
}

dotfiles() {
  pushd $HOME > /dev/null
  /usr/local/bin/git --git-dir=$HOME/dotfiles-new.git/ --work-tree=$HOME "$@"
  popd > /dev/null
}

pathappend() {
  for ARG in "$@"; do
    if [ -d "$ARG" ] && [[ ":$PATH:" != *":$ARG:"* ]]; then
      PATH="${PATH:+"$PATH:"}$ARG"
    fi
  done
}

pathprepend() {
  for ((i=$#; i>0; i--)); do
    ARG=${!i}
    if [ -d "$ARG" ] && [[ ":$PATH:" != *":$ARG:"* ]]; then
      PATH="$ARG${PATH:+":$PATH"}"
    fi
  done
}

# vim: ft=sh
